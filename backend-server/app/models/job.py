"""
Job and Career Database Models
"""
from sqlalchemy import Column, Integer, String, DateTime, Text, JSON, Float, Boolean
from datetime import datetime
from typing import Dict, Any

from .base import Base



class Job(Base):
    """Job posting model with detailed information"""
    __tablename__ = "jobs"
    
    job_id = Column(String(50), primary_key=True)
    title = Column(String(255), nullable=False)
    company = Column(String(255), nullable=False)
    location = Column(String(255))
    remote_type = Column(String(50))  # 'remote', 'hybrid', 'onsite'
    
    # Job details
    description = Column(Text)
    requirements = Column(JSON)  # List of job requirements
    responsibilities = Column(JSON)  # List of responsibilities
    qualifications = Column(JSON)  # Required qualifications
    
    # Compensation
    salary_min = Column(Integer)
    salary_max = Column(Integer)
    salary_currency = Column(String(10), default="USD")
    benefits = Column(JSON)  # List of benefits
    
    # Job metadata
    employment_type = Column(String(50))  # 'full-time', 'part-time', 'contract'
    experience_level = Column(String(50))  # 'entry', 'mid', 'senior', 'executive'
    industry = Column(String(100))
    department = Column(String(100))
    
    # Source information
    source = Column(String(50), nullable=False)  # 'linkedin', 'indeed', etc.
    external_id = Column(String(255))  # ID from source platform
    source_url = Column(String(500))  # Original job posting URL
    
    # Dates
    posted_date = Column(DateTime)
    application_deadline = Column(DateTime)
    scraped_at = Column(DateTime, default=datetime.utcnow)
    
    # Status
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert job to dictionary"""
        return {
            "job_id": self.job_id,
            "title": self.title,
            "company": self.company,
            "location": self.location,
            "remote_type": self.remote_type,
            "description": self.description,
            "requirements": self.requirements,
            "responsibilities": self.responsibilities,
            "qualifications": self.qualifications,
            "salary_min": self.salary_min,
            "salary_max": self.salary_max,
            "salary_currency": self.salary_currency,
            "benefits": self.benefits,
            "employment_type": self.employment_type,
            "experience_level": self.experience_level,
            "industry": self.industry,
            "department": self.department,
            "source": self.source,
            "external_id": self.external_id,
            "source_url": self.source_url,
            "posted_date": self.posted_date.isoformat() if self.posted_date else None,
            "application_deadline": self.application_deadline.isoformat() if self.application_deadline else None,
            "scraped_at": self.scraped_at.isoformat() if self.scraped_at else None,
            "is_active": self.is_active,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None
        }


class JobRecommendation(Base):
    """Job recommendations generated by AI agents"""
    __tablename__ = "job_recommendations"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(String(50), nullable=False)
    job_id = Column(String(50), nullable=False)
    
    # Recommendation scoring
    compatibility_score = Column(Float, nullable=False)  # 0.0 to 1.0
    reasoning = Column(Text)  # AI explanation for recommendation
    
    # Matching details
    skill_match_score = Column(Float)
    experience_match_score = Column(Float)
    location_match_score = Column(Float)
    salary_match_score = Column(Float)
    
    # Recommendation metadata
    agent_id = Column(String(50))  # Which agent made the recommendation
    recommendation_context = Column(JSON)  # Context used for recommendation
    
    # User interaction
    user_feedback = Column(String(20))  # 'interested', 'not_interested', 'applied'
    viewed_at = Column(DateTime)
    feedback_at = Column(DateTime)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class JobApplication(Base):
    """User job applications tracking"""
    __tablename__ = "job_applications"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(String(50), nullable=False)
    job_id = Column(String(50), nullable=False)
    
    # Application details
    status = Column(String(50), default="applied")  # 'applied', 'screening', 'interview', 'offer', 'rejected'
    application_date = Column(DateTime, default=datetime.utcnow)
    resume_version = Column(String(50))  # Which resume version was used
    cover_letter = Column(Text)
    
    # Application tracking
    application_source = Column(String(50))  # How they applied
    recruiter_contact = Column(JSON)  # Recruiter information
    interview_stages = Column(JSON)  # Interview process tracking
    
    # Outcome
    outcome = Column(String(50))  # Final outcome
    outcome_date = Column(DateTime)
    feedback = Column(Text)  # Feedback received
    
    # Metadata
    notes = Column(Text)  # User notes about application
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class SavedJob(Base):
    """Jobs saved by users for later review"""
    __tablename__ = "saved_jobs"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(String(50), nullable=False)
    job_id = Column(String(50), nullable=False)
    
    # Save details
    saved_at = Column(DateTime, default=datetime.utcnow)
    notes = Column(Text)  # User notes about the job
    priority = Column(String(20), default="medium")  # 'low', 'medium', 'high'
    
    # Status
    is_active = Column(Boolean, default=True)
    applied = Column(Boolean, default=False)
    applied_at = Column(DateTime)