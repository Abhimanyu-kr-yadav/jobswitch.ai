"""
AI Agent Database Models
"""
from sqlalchemy import Column, Integer, String, DateTime, Text, JSON, Float, Boolean
from datetime import datetime
from typing import Dict, Any

from .base import Base



class AgentSession(Base):
    """Agent session tracking and context management"""
    __tablename__ = "agent_sessions"
    
    session_id = Column(String(50), primary_key=True)
    agent_id = Column(String(50), nullable=False)
    user_id = Column(String(50), nullable=False)
    
    # Session context
    context_data = Column(JSON)  # Agent conversation context
    shared_context = Column(JSON)  # Shared context with other agents
    
    # Session metadata
    session_type = Column(String(50))  # 'job_search', 'resume_optimization', etc.
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    expires_at = Column(DateTime)


class AgentTask(Base):
    """Agent task execution tracking"""
    __tablename__ = "agent_tasks"
    
    task_id = Column(String(50), primary_key=True)
    agent_id = Column(String(50), nullable=False)
    user_id = Column(String(50), nullable=False)
    
    # Task details
    task_type = Column(String(50), nullable=False)
    task_payload = Column(JSON)  # Task input data
    priority = Column(Integer, default=2)  # 1=low, 2=medium, 3=high, 4=urgent
    
    # Execution tracking
    status = Column(String(20), default="pending")  # 'pending', 'in_progress', 'completed', 'failed'
    started_at = Column(DateTime)
    completed_at = Column(DateTime)
    
    # Results
    result_data = Column(JSON)  # Task output data
    error_message = Column(Text)
    execution_time_ms = Column(Integer)  # Execution time in milliseconds
    
    # Metadata
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class AgentInteraction(Base):
    """User interactions with AI agents"""
    __tablename__ = "agent_interactions"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(String(50), nullable=False)
    agent_id = Column(String(50), nullable=False)
    session_id = Column(String(50))
    
    # Interaction details
    interaction_type = Column(String(50), nullable=False)  # 'query', 'recommendation', 'feedback'
    user_input = Column(JSON)  # User's input/request
    agent_response = Column(JSON)  # Agent's response
    
    # Context
    context_before = Column(JSON)  # Context before interaction
    context_after = Column(JSON)  # Context after interaction
    
    # Feedback and rating
    user_rating = Column(Integer)  # 1-5 rating from user
    user_feedback = Column(Text)  # User feedback on response
    
    # Timing
    response_time_ms = Column(Integer)  # Response time in milliseconds
    created_at = Column(DateTime, default=datetime.utcnow)


class AgentRecommendation(Base):
    """Recommendations generated by AI agents"""
    __tablename__ = "agent_recommendations"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(String(50), nullable=False)
    agent_id = Column(String(50), nullable=False)
    
    # Recommendation details
    recommendation_type = Column(String(50), nullable=False)  # 'job', 'skill', 'course', etc.
    recommendation_data = Column(JSON)  # Recommendation content
    confidence_score = Column(Float)  # Agent confidence in recommendation
    reasoning = Column(Text)  # Explanation for recommendation
    
    # User interaction
    status = Column(String(20), default="pending")  # 'pending', 'viewed', 'accepted', 'rejected'
    user_feedback = Column(String(20))  # User's response to recommendation
    viewed_at = Column(DateTime)
    responded_at = Column(DateTime)
    
    # Metadata
    expires_at = Column(DateTime)  # When recommendation expires
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class AgentPerformance(Base):
    """Agent performance metrics and analytics"""
    __tablename__ = "agent_performance"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    agent_id = Column(String(50), nullable=False)
    
    # Performance metrics
    metric_type = Column(String(50), nullable=False)  # 'response_time', 'accuracy', 'user_satisfaction'
    metric_value = Column(Float, nullable=False)
    metric_unit = Column(String(20))  # 'ms', 'percentage', 'rating'
    
    # Context
    measurement_context = Column(JSON)  # Context for the measurement
    user_id = Column(String(50))  # User associated with metric (if applicable)
    
    # Timing
    measured_at = Column(DateTime, default=datetime.utcnow)
    period_start = Column(DateTime)  # For aggregated metrics
    period_end = Column(DateTime)


class AgentConfiguration(Base):
    """Agent configuration and settings"""
    __tablename__ = "agent_configurations"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    agent_id = Column(String(50), nullable=False)
    
    # Configuration
    config_type = Column(String(50), nullable=False)  # 'model_params', 'behavior', 'integration'
    config_data = Column(JSON, nullable=False)  # Configuration settings
    
    # Versioning
    version = Column(String(20), default="1.0")
    is_active = Column(Boolean, default=True)
    
    # Metadata
    created_by = Column(String(50))  # Who created this configuration
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)